version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Ea6bixF4nrJ7zUBE8FEfoM/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
            fi
  awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
            
  nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
  restore-backend-cache:
    steps:
      - restore_cache:
          keys: [backend-build]

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: run front-end test
          command: |
            cd frontend
            npm install
            npm run test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: run back-end test
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum update -y
            yum install tar -y
            yum install gzip -y
            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/frontend.yml \
             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
             --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you may add some code to rollback on failures'''  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f5:91:c4:3d:dc:b4:70:34:03:4c:c4:90:ce:4d:6d:cd"]

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
      - attach_workspace:
          at: ~/

      - run:
          name: configure server
          command: |
            echo NODE_ENV=production > ~/project/backend/.env
            echo VERSION: "1" >> ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR  >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            cat ~/project/backend/.env
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 40m

      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
  
  # run-migrations:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - awscli
  #     - restore_cache:
  #         keys: [backend-scan]
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #           echo "has been executed successfully." >> migrations_dump.txt
  #           cat migrations_dump.txt
  #     - run:
  #         name: Send migration status to kvdb.io
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then  
  #                curl https://kvdb.io/Ea6bixF4nrJ7zUBE8FEfoM/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'    
  #           fi    

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum update -y && yum install -y sudo
  #           sudo yum install -y gcc-c++ make
  #           curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash -
  #           sudo yum install nodejs -y
  #           yum install tar -y
  #           yum install gzip -y
  #           # Use n version manager to use Node.js v13.8.0
  #           sudo npm install --global n
  #           sudo n 13.8.0
  #     - attach_workspace:
  #         at: ~/

  #     - run:
  #         name: Get Backend Url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy front-end object
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  # deploy-backend:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - awscli
  #     - ansible
  #     - nodejs
  #     - add_ssh_keys:
  #         fingerprints: ["de:27:ab:2f:f9:4b:b6:ae:51:39:8a:5b:b2:ec:a7:bb"]

  #     - attach_workspace:
  #         at: ~/
  #     - restore_cache:
  #         keys: [backend-build]

  #     - run:
  #         name: Install dependencies
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           cd ..
  #     - run:
  #         name: Package Backend
  #         command: |
  #           tar -C backend -czvf artifact.tar.gz .
  #           cp artifact.tar.gz  ~/
  #     - run:
  #         name: Checking the existence of inventory.txt && artifact.tar.gz file
  #         command: |
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           echo "Contents of files folder is -------"
  #           ls ~/
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # smoke-test:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - awscli
  #     - nodejs
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           export API_URL=http://${BACKEND_PUBLIC_IP}:3030
  #           echo ${API_URL}
  #           if curl -s $API_URL/api/status | grep "ok"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
  #           echo ${URL}
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cloudfront-update:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - awscli
  #     - nodejs
  #     - run:
  #         name: Save Old Workflow ID to a text file
  #         command: |
  #           aws cloudformation \
  #              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #              --no-paginate --output text > ~/workflowfile.txt
  #           cat ~/workflowfile.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - workflowfile.txt

  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --stack-name InitialStack
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    
  # cleanup:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - awscli
  #     - nodejs
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Fetch Oldstack workflow ID
  #         command: |
  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #           echo Stack names: "${STACKS[@]}"
  #           export OldWorkflowID=$(cat ~/workflowfile.txt)
  #           echo Old Workflow ID: $OldWorkflowID 
  #           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
  #           if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]